{ john-program }

bound Integer [0,30].
class AList: 30 Integer List inp, out.
; checks whether shuffled around version of the list based on the index map list M is sorted:
qualify List sorted-n-mappedWith: M if for all I in (its indices - its lastIndex) | 
        it at: (M at: I) <= it at: (M at: (I + 1)).
qualify List permutationOf: L if for all I in all Integer | it count: I = L count: I.
qualify AList sorted-n-mappedWith: M if its out permutationOf: (its inp) and 
                                        its out sorted-n-mappedWith: M.
goal AList sort-n-map it sorted-n-mappedWith: 
           [21,15,22,12,28,3,5,10,24,19,29,0,11,7,16,1,27,8,14,6,18,23,9,4,25,13,17,20,2,26].
make AList L1 [7,10,2,4,3,9,3,8,13,5,20,18,9,20,1,10,5,7,12,2,8,5,19,15,5,4,13,11,4,17] [].
L1 solve sort-n-map.
